
            AUTHZ_CLIENT_CONTEXT_HANDLE authzHandle;

            /* Retrieval of authorization context for client
            only succeeds if the same is authenticated: */
            auto status = RpcGetAuthorizationContextForClient(
                static_cast<RPC_BINDING_HANDLE> (context),
                TRUE, // impersonate
                nullptr, // reserved params
                0, // no expiration time
                LUID{}, 0, nullptr, // reserved params
                reinterpret_cast<PVOID *> (&authzHandle)
            );

            // Client is not authenticated:
            if (status == RPC_S_NO_CONTEXT_AVAILABLE)
                return RPC_S_ACCESS_DENIED;

            LogIfError(status,
                "Failed to retrieve authorization context for RPC",
                core::Logger::PRIO_ERROR);

            // Release authorization context because it will no longer be used:
            status = RpcFreeAuthorizationContext(reinterpret_cast<PVOID *> (&authzHandle));

            LogIfError(status,
                "Failed to release authorization context for RPC",
                core::Logger::PRIO_CRITICAL);
