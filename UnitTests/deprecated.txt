        /*
        using ctl::MultiLayerCtnr;

        /// <summary>
        /// Something to be moved around.
        /// </summary>
        class Stuff
        {
        private:

            int m_anything;

        public:

            Stuff()
                : m_anything(666) {}

            Stuff(Stuff &&ob)
            {
                m_anything = ob.m_anything;
                ob.m_anything = 0;
            }

            Stuff & operator =(Stuff &&ob)
            {
                m_anything = ob.m_anything;
                ob.m_anything = 0;
                return *this;
            }

            operator int() { return m_anything;    }
        };
    
        /// <summary>
        /// Generic tests for the <see cref="MultiLayerCtnr" /> class.
        /// </summary>
        TEST(Framework_CTL_TestCase, MultiLayerCtnr_GenericTest)
        {
            const int k = 6;

            std::array<MultiLayerCtnr<int>, 5> mlc;

            std::vector<int> expectedContent(k * mlc.size());


            for(int mlcIndex = 0 ; mlcIndex < mlc.size() ; ++mlcIndex)
            {
                for(int elementsIndex = 1 + mlcIndex * k ; elementsIndex <= k * (mlcIndex + 1) ; ++elementsIndex)
                {
                    mlc[mlcIndex].AddToLayer(elementsIndex);
                    expectedContent[elementsIndex - 1] = elementsIndex;
                }
            }

            mlc[4].AddToLayer(mlc[1]); // This makes a cycle
            mlc[2].AddToLayer(mlc[4]);
            mlc[2].AddToLayer(mlc[3]);
            mlc[1].AddToLayer(mlc[3]);
            mlc[1].AddToLayer(mlc[2]);
            mlc[0].AddToLayer(mlc[1]);

            ///////////////////////////////////////////////////////////////

            set<int> elements = mlc[0].GetDistinctElements();

            std::vector<int> actualContent(elements.cbegin(), elements.cend());

            EXPECT_EQ(false, mlc[0].Empty());
            EXPECT_EQ(true, mlc[0].Find((mlc.size() - 1) * k));
            EXPECT_EQ(false, mlc[0].Find(mlc.size() * k + 1));

            EXPECT_TRUE(
                std::equal(actualContent.cbegin(), actualContent.cend(), expectedContent.cbegin())
            );
            
            ////////////////////////////////////////////////////////////////

            mlc[2].RemoveFromLayer(mlc[4]);

            elements = mlc[0].GetDistinctElements();

            actualContent.assign(elements.cbegin(), elements.cend());

            EXPECT_EQ(false, mlc[0].Empty());
            EXPECT_EQ(true, mlc[0].Find((mlc.size() - 1) * k));
            EXPECT_EQ(false, mlc[0].Find(mlc.size() * k));

            EXPECT_TRUE(
                std::equal(actualContent.cbegin(), actualContent.cend(), expectedContent.cbegin())
            );

            ////////////////////////////////////////////////////////////////

            mlc[0].ClearLayer();
            mlc[1].ClearLayer();

            mlc[0].AddToLayer(mlc[1]);

            EXPECT_EQ(true, mlc[0].Empty());
        }

        /// <summary>
        /// Tests a set of recursively nested <see cref="MultiLayerCtnr" /> objects, all empty of elements.
        /// </summary>
        TEST(Framework_CTL_TestCase, MultiLayerCtnr_EmptyLayersTest)
        {
            std::array<MultiLayerCtnr<int>, 666> mlc;

            for(size_t index = 0, end = mlc.size() - 1 ; index < end ; ++index)
                mlc[index].AddToLayer(mlc[index + 1]);

            EXPECT_EQ(true, mlc.begin()->Empty());
        }

        /// <summary>
        /// Tests a set of recursively nested <see cref="MultiLayerCtnr" /> objects closing a cycle, all empty of elements.
        /// </summary>
        TEST(Framework_CTL_TestCase, MultiLayerCtnr_SingleCycleTest)
        {
            std::array<MultiLayerCtnr<int>, 666> mlc;

            for(size_t index = 0, end = mlc.size() - 1 ; index < end ; ++index)
                mlc[index].AddToLayer(mlc[index + 1]);

            mlc.rbegin()->AddToLayer(*mlc.begin());

            EXPECT_EQ(true, mlc.begin()->Empty());
        }
        */
        /*
        /// <summary>
        /// Tests the implementation of the <see cref="JudyArray"/> container template.
        /// </summary>
        TEST(Judy_TestCase, L01_JudyAddrArray_Test)
        {
            judy::JudyArray<int> judyArray;
        
            typedef judy::JudyArray<int>::Pair jpair;
        
            const int numElements = 65;

            // Insert elements:

            for(int count = 0 ; count < numElements ; ++count)
            {
                auto element = new int(count);

                ASSERT_TRUE(
                    judyArray.insert(jpair(count, element)).second
                );
            }

            // Find the element in the middle:

            auto elementToFind = numElements / 2;
            auto iter = judyArray.find(elementToFind);

            ASSERT_NE(judyArray.end(), iter);
            ASSERT_EQ(elementToFind, *iter->second);

            // Erase the entry found
            delete iter->second;
            judyArray.erase(iter);

            // The erased entry should be gone
            ASSERT_EQ(judyArray.end(), judyArray.find(elementToFind));

            // Find the lower bound of the element that was in the middle:

            iter = judyArray.lower_bound(elementToFind);
            auto expectedElement = elementToFind + 1;
        
            ASSERT_NE(judyArray.end(), iter);
            ASSERT_EQ(expectedElement, iter->first);
            ASSERT_EQ(expectedElement, *iter->second);

            // Move to the next entry:

            ++iter;
            ++expectedElement;

            ASSERT_NE(judyArray.end(), iter);
            ASSERT_EQ(expectedElement, iter->first);
            ASSERT_EQ(expectedElement, *iter->second);

            // Come back to the previous entry:
        
            --iter;
            --expectedElement;

            ASSERT_NE(judyArray.end(), iter);
            ASSERT_EQ(expectedElement, iter->first);
            ASSERT_EQ(expectedElement, *iter->second);
        
            // Find the last...

            expectedElement = elementToFind = numElements - 1;
            iter = judyArray.lower_bound(elementToFind);
        
            ASSERT_NE(judyArray.end(), iter);
            ASSERT_EQ(expectedElement, iter->first);
            ASSERT_EQ(expectedElement, *iter->second);

            // ...and try to go past the last:

            ++iter;
            ASSERT_EQ(judyArray.end(), iter);

            // Find the first...

            elementToFind = expectedElement = 0;
            iter = judyArray.begin();
        
            ASSERT_NE(judyArray.end(), iter);
            ASSERT_EQ(expectedElement, iter->first);
            ASSERT_EQ(expectedElement, *iter->second);

            // ...iterate over all the elements:
            for(auto &pair : judyArray)
                delete pair.second;
        }*/
